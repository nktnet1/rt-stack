/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as publicPublicImport } from './routes/(public)/_public'
import { Route as protectedPostsIndexImport } from './routes/(protected)/posts/index'

// Create Virtual Routes

const publicImport = createFileRoute('/(public)')()
const IndexLazyImport = createFileRoute('/')()
const publicPublicRegisterLazyImport = createFileRoute(
  '/(public)/_public/register',
)()
const publicPublicLoginLazyImport = createFileRoute('/(public)/_public/login')()

// Create/Update Routes

const publicRoute = publicImport.update({
  id: '/(public)',
  getParentRoute: () => rootRoute,
} as any)

const IndexLazyRoute = IndexLazyImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

const publicPublicRoute = publicPublicImport.update({
  id: '/_public',
  getParentRoute: () => publicRoute,
} as any)

const protectedPostsIndexRoute = protectedPostsIndexImport
  .update({
    id: '/(protected)/posts/',
    path: '/posts/',
    getParentRoute: () => rootRoute,
  } as any)
  .lazy(() =>
    import('./routes/(protected)/posts/index.lazy').then((d) => d.Route),
  )

const publicPublicRegisterLazyRoute = publicPublicRegisterLazyImport
  .update({
    id: '/register',
    path: '/register',
    getParentRoute: () => publicPublicRoute,
  } as any)
  .lazy(() =>
    import('./routes/(public)/_public.register.lazy').then((d) => d.Route),
  )

const publicPublicLoginLazyRoute = publicPublicLoginLazyImport
  .update({
    id: '/login',
    path: '/login',
    getParentRoute: () => publicPublicRoute,
  } as any)
  .lazy(() =>
    import('./routes/(public)/_public.login.lazy').then((d) => d.Route),
  )

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/(public)': {
      id: '/(public)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof publicImport
      parentRoute: typeof rootRoute
    }
    '/(public)/_public': {
      id: '/(public)/_public'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof publicPublicImport
      parentRoute: typeof publicRoute
    }
    '/(public)/_public/login': {
      id: '/(public)/_public/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof publicPublicLoginLazyImport
      parentRoute: typeof publicPublicImport
    }
    '/(public)/_public/register': {
      id: '/(public)/_public/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof publicPublicRegisterLazyImport
      parentRoute: typeof publicPublicImport
    }
    '/(protected)/posts/': {
      id: '/(protected)/posts/'
      path: '/posts'
      fullPath: '/posts'
      preLoaderRoute: typeof protectedPostsIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

interface publicPublicRouteChildren {
  publicPublicLoginLazyRoute: typeof publicPublicLoginLazyRoute
  publicPublicRegisterLazyRoute: typeof publicPublicRegisterLazyRoute
}

const publicPublicRouteChildren: publicPublicRouteChildren = {
  publicPublicLoginLazyRoute: publicPublicLoginLazyRoute,
  publicPublicRegisterLazyRoute: publicPublicRegisterLazyRoute,
}

const publicPublicRouteWithChildren = publicPublicRoute._addFileChildren(
  publicPublicRouteChildren,
)

interface publicRouteChildren {
  publicPublicRoute: typeof publicPublicRouteWithChildren
}

const publicRouteChildren: publicRouteChildren = {
  publicPublicRoute: publicPublicRouteWithChildren,
}

const publicRouteWithChildren =
  publicRoute._addFileChildren(publicRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof publicPublicRouteWithChildren
  '/login': typeof publicPublicLoginLazyRoute
  '/register': typeof publicPublicRegisterLazyRoute
  '/posts': typeof protectedPostsIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof publicPublicRouteWithChildren
  '/login': typeof publicPublicLoginLazyRoute
  '/register': typeof publicPublicRegisterLazyRoute
  '/posts': typeof protectedPostsIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexLazyRoute
  '/(public)': typeof publicRouteWithChildren
  '/(public)/_public': typeof publicPublicRouteWithChildren
  '/(public)/_public/login': typeof publicPublicLoginLazyRoute
  '/(public)/_public/register': typeof publicPublicRegisterLazyRoute
  '/(protected)/posts/': typeof protectedPostsIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/login' | '/register' | '/posts'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/login' | '/register' | '/posts'
  id:
    | '__root__'
    | '/'
    | '/(public)'
    | '/(public)/_public'
    | '/(public)/_public/login'
    | '/(public)/_public/register'
    | '/(protected)/posts/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  publicRoute: typeof publicRouteWithChildren
  protectedPostsIndexRoute: typeof protectedPostsIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  publicRoute: publicRouteWithChildren,
  protectedPostsIndexRoute: protectedPostsIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/(public)",
        "/(protected)/posts/"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/(public)": {
      "filePath": "(public)",
      "children": [
        "/(public)/_public"
      ]
    },
    "/(public)/_public": {
      "filePath": "(public)/_public.tsx",
      "parent": "/(public)",
      "children": [
        "/(public)/_public/login",
        "/(public)/_public/register"
      ]
    },
    "/(public)/_public/login": {
      "filePath": "(public)/_public.login.lazy.tsx",
      "parent": "/(public)/_public"
    },
    "/(public)/_public/register": {
      "filePath": "(public)/_public.register.lazy.tsx",
      "parent": "/(public)/_public"
    },
    "/(protected)/posts/": {
      "filePath": "(protected)/posts/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
